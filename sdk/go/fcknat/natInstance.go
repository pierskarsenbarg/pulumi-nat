// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fcknat

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-fcknat/sdk/go/fcknat/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NatInstance struct {
	pulumi.ResourceState

	// Instance Id of the EC2 instance
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	SubnetId   pulumi.StringOutput `pulumi:"subnetId"`
}

// NewNatInstance registers a new resource with the given unique name, arguments, and options.
func NewNatInstance(ctx *pulumi.Context,
	name string, args *NatInstanceArgs, opts ...pulumi.ResourceOption) (*NatInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatInstance
	err := ctx.RegisterRemoteComponentResource("fcknat:index:NatInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type natInstanceArgs struct {
	// CIDR blocks that you want the NAT instance to be available to. Will use the CIDR block for the VPC otherwise
	Cidr *string `pulumi:"cidr"`
	// Instance type of the NAT instance
	InstanceType string `pulumi:"instanceType"`
	// Public subnet ID where the NAT instance will be created. If not specified then one will be selected from the VPC.
	SubnetId *string `pulumi:"subnetId"`
	// Id of the VPC that the NAT instance will be inside. Will select the default VPC for the region if not set.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a NatInstance resource.
type NatInstanceArgs struct {
	// CIDR blocks that you want the NAT instance to be available to. Will use the CIDR block for the VPC otherwise
	Cidr pulumi.StringPtrInput
	// Instance type of the NAT instance
	InstanceType pulumi.StringInput
	// Public subnet ID where the NAT instance will be created. If not specified then one will be selected from the VPC.
	SubnetId pulumi.StringPtrInput
	// Id of the VPC that the NAT instance will be inside. Will select the default VPC for the region if not set.
	VpcId pulumi.StringPtrInput
}

func (NatInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natInstanceArgs)(nil)).Elem()
}

type NatInstanceInput interface {
	pulumi.Input

	ToNatInstanceOutput() NatInstanceOutput
	ToNatInstanceOutputWithContext(ctx context.Context) NatInstanceOutput
}

func (*NatInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**NatInstance)(nil)).Elem()
}

func (i *NatInstance) ToNatInstanceOutput() NatInstanceOutput {
	return i.ToNatInstanceOutputWithContext(context.Background())
}

func (i *NatInstance) ToNatInstanceOutputWithContext(ctx context.Context) NatInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatInstanceOutput)
}

type NatInstanceOutput struct{ *pulumi.OutputState }

func (NatInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatInstance)(nil)).Elem()
}

func (o NatInstanceOutput) ToNatInstanceOutput() NatInstanceOutput {
	return o
}

func (o NatInstanceOutput) ToNatInstanceOutputWithContext(ctx context.Context) NatInstanceOutput {
	return o
}

// Instance Id of the EC2 instance
func (o NatInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o NatInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatInstance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatInstanceInput)(nil)).Elem(), &NatInstance{})
	pulumi.RegisterOutputType(NatInstanceOutput{})
}
