# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NatInstanceArgs', 'NatInstance']

@pulumi.input_type
class NatInstanceArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 cidr: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NatInstance resource.
        :param pulumi.Input[str] instance_type: Instance type of the NAT instance
        :param pulumi.Input[str] cidr: CIDR blocks that you want the NAT instance to be available to. Will use the CIDR block for the VPC otherwise
        :param pulumi.Input[str] subnet_id: Public subnet ID where the NAT instance will be created. If not specified then one will be selected from the VPC.
        :param pulumi.Input[str] vpc_id: Id of the VPC that the NAT instance will be inside. Will select the default VPC for the region if not set.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Instance type of the NAT instance
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        CIDR blocks that you want the NAT instance to be available to. Will use the CIDR block for the VPC otherwise
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Public subnet ID where the NAT instance will be created. If not specified then one will be selected from the VPC.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the VPC that the NAT instance will be inside. Will select the default VPC for the region if not set.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class NatInstance(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NatInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr: CIDR blocks that you want the NAT instance to be available to. Will use the CIDR block for the VPC otherwise
        :param pulumi.Input[str] instance_type: Instance type of the NAT instance
        :param pulumi.Input[str] subnet_id: Public subnet ID where the NAT instance will be created. If not specified then one will be selected from the VPC.
        :param pulumi.Input[str] vpc_id: Id of the VPC that the NAT instance will be inside. Will select the default VPC for the region if not set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NatInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NatInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NatInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NatInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NatInstanceArgs.__new__(NatInstanceArgs)

            __props__.__dict__["cidr"] = cidr
            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["instance_id"] = None
        super(NatInstance, __self__).__init__(
            'fcknat:index:NatInstance',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance Id of the EC2 instance
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "subnet_id")

