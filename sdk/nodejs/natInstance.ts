// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NatInstance extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'fcknat:index:NatInstance';

    /**
     * Returns true if the given object is an instance of NatInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NatInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatInstance.__pulumiType;
    }

    /**
     * Instance Id of the EC2 instance
     */
    public /*out*/ readonly instanceId!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;

    /**
     * Create a NatInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatInstanceArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["instanceId"] = undefined /*out*/;
        } else {
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NatInstance.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a NatInstance resource.
 */
export interface NatInstanceArgs {
    /**
     * CIDR blocks that you want the NAT instance to be available to. Will use the CIDR block for the VPC otherwise
     */
    cidr?: pulumi.Input<string>;
    /**
     * Instance type of the NAT instance
     */
    instanceType: pulumi.Input<string>;
    /**
     * Public subnet ID where the NAT instance will be created. If not specified then one will be selected from the VPC.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Id of the VPC that the NAT instance will be inside. Will select the default VPC for the region if not set.
     */
    vpcId?: pulumi.Input<string>;
}
